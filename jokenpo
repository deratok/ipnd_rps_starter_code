"""This program plays a game of Rock, Paper, Scissors between two Players,
and reports both Player's scores each round."""
 
moves = ['rock', 'paper', 'scissors']
 
"""The Player class is the parent class for all of the Players
in this game"""
 
import random
score_p1 = 0
score_p2 = 0
 
class Player:
    def move(self):
        return 'rock'
 
    def learn(self, my_move, their_move):
        pass
 
class RandomPlayer(Player):
    def move(self):
        return(random.choice(moves))
 
class HumanPlayer(Player):
    def move(self):
        while True:
            throw = input("Throw something! Choose rock, paper, scissors:")
            if throw not in moves:
                print("Please type in a valid input: 'rock', 'paper', or 'scissors'")
                continue
            else:
                return(throw)
                break
 
class ReflectPlayer(Player):
   
    def __init__(self):
        your_first_move = self.human_move
   
    def learn(self, my_move, their_move):
        self.human_move = their_move
       
    def move(self,their_move):
        return self.their_move
 
# class CyclePlayer(Player):
 
 
def beats(one, two):
    return ((one == 'rock' and two == 'scissors') or
            (one == 'scissors' and two == 'paper') or
            (one == 'paper' and two == 'rock'))
 
 
class Game:
 
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
       
    def play_round(self):
        global score_p1, score_p2
        move1 = self.p1.move()
        move2 = self.p2.move()
        print(f"Player1: {move1}  Player2: {move2}")
        if beats(move1,move2):
            score_p1 += 1
            print(f"Player1 wins!")
        elif beats(move2,move1):
            score_p2 += 1
            print(f"Player2 wins!")
        else:
            print("It's a tie! Nobody gets points!")
        print(f"Scores: Player1-{score_p1}, Player2-{score_p2}")
        self.p1.learn(move1, move2)
        self.p2.learn(move2, move1)
 
    def play_game(self):
        print("Game start!")
        for round in range(3):
            print(f"Round {round}:")
            self.play_round()
        print("Game over!")
 
 
if __name__ == '__main__':
    game = Game(HumanPlayer(), ReflectPlayer())
    game.play_game()
